**‡§≠‡§æ‡§ä, ‡§§‡•Ç ‡§Æ‡§æ‡§ó‡§ø‡§§‡§≤‡§Ç‡§Ø ‡§§‡§∏‡§Ç‡§ö ‡§ï‡§∞‡§§‡•ã ‚Äî ‡§è‡§ï‡§¶‡§Æ ‡§™‡§æ‡§Ø‡§æ‡§™‡§æ‡§∏‡•Ç‡§® ‡§§‡•á ‡§∂‡§ø‡§ñ‡§∞‡§æ‡§™‡§∞‡•ç‡§Ø‡§Ç‡§§, ‡§è‡§ï ‡§¨‡•á‡§∏‡§ø‡§ï Java App ‡§ò‡•á‡§ä‡§®, GKE, Vault, GitHub Actions, MySQL ‚Äî ‡§∏‡§ó‡§≥‡§Ç ‡§è‡§ï‡§æ flow ‡§Æ‡§ß‡•ç‡§Ø‡•á.**  
‡§ï‡•ã‡§£‡§§‡§æ‡§π‡•Ä ‡§≠‡§æ‡§ó ‡§∏‡•ã‡§°‡§£‡§æ‡§∞ ‡§®‡§æ‡§π‡•Ä.  
‡§§‡•Ç ‡§π‡•á ‡§∏‡§Æ‡§ú‡•Ç‡§® ‡§ò‡•á‡§§‡§≤‡§Ç‡§∏ ‡§ï‡•Ä, **interview ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§§‡•ã‡§Ç‡§°‡§æ‡§µ‡§∞‡•Ç‡§® ‡§∏‡§æ‡§Ç‡§ó‡•Ç ‡§∂‡§ï‡§∂‡•Ä‡§≤** ‡§ï‡•Ä ‡§ï‡§∏‡§Ç ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§Ç.

---

## üéØ ‡§™‡§∞‡§ø‡§∏‡•ç‡§•‡§ø‡§§‡•Ä:  
‡§è‡§ï ‡§∏‡§æ‡§ß‡§æ **Java Spring Boot App** ‡§Ü‡§π‡•á, ‡§ú‡•ã:

- GKE ‡§µ‡§∞ deploy ‡§π‡•ã‡§§‡•ã
- MySQL database ‡§µ‡§æ‡§™‡§∞‡§§‡•ã
- Database credentials (username, password) Vault ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§Ü‡§π‡•á‡§§
- GitHub Actions (GHA) ‡§µ‡§æ‡§™‡§∞‡•Ç‡§® build & deploy ‡§π‡•ã‡§§‡§Ç
- GKE pod Vault ‡§Æ‡§ß‡•Ç‡§® secret ‡§ò‡•á‡§ä‡§® app ‡§∏‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§§‡•ã
- GitHub Actions ‡§¶‡•á‡§ñ‡•Ä‡§≤ Vault ‡§Æ‡§ß‡•Ç‡§® secret ‡§ò‡•á‡§§‡§Ç (‡§â‡§¶‡§æ: image pull secret, terraform backend)

---

# ‚úÖ ‡§∏‡•ç‡§ü‡•á‡§™ 1: Vault ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§∏‡§ó‡§≥‡§Ç ‡§∏‡•á‡§ü‡§Ö‡§™ ‡§ï‡•á‡§≤‡§Ç‡§Ø (Terraform)

> (‡§π‡•á ‡§§‡•Ç ‡§ï‡§ø‡§Ç‡§µ‡§æ infra ‡§ü‡•Ä‡§Æ ‡§ï‡§∞‡§§‡•á ‚Äî ‡§§‡•Ç ‡§´‡§ï‡•ç‡§§ ‡§Ø‡§æ‡§ö‡§æ flow ‡§∏‡§Æ‡§ú‡•Ç‡§® ‡§ò‡•á)

```hcl
# 1. Kubernetes Auth Backend (GKE ‡§∏‡§æ‡§†‡•Ä)
resource "vault_auth_backend" "kubernetes" {
  type = "kubernetes"
  path = "kubernetes-gke-nonprod"
}

# 2. Kubernetes Role (‡§ï‡•ã‡§£‡§§‡•ç‡§Ø‡§æ pod ‡§≤‡§æ access?)
resource "vault_kubernetes_auth_backend_role" "java_app_dev" {
  backend                          = vault_auth_backend.kubernetes.path
  role_name                        = "java-app-dev-role"
  bound_service_account_names      = ["java-app-sa"]
  bound_service_account_namespaces = ["java-app-dev"]
  token_ttl                        = 3600
  token_policies                   = ["java-app-dev-policy"]
}
```

> üìñ ‡§Æ‡•ç‡§π‡§£‡§ú‡•á:  
> "‡§ú‡§∞ GKE ‡§µ‡§∞‡§ö‡§æ pod `java-app-dev` namespace ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§Ö‡§∏‡•á‡§≤,  
> ‡§Ü‡§£‡§ø ‡§§‡•ç‡§Ø‡§æ‡§ö‡§æ Service Account ‡§®‡§æ‡§µ `java-app-sa` ‡§Ö‡§∏‡•á‡§≤,  
> ‡§§‡§∞ ‡§§‡•ç‡§Ø‡§æ‡§≤‡§æ `java-app-dev-policy` policy ‡§Æ‡§ø‡§≥‡•á‡§≤."

---

```hcl
# 3. Policy: ‡§π‡•Ä policy ‡§ï‡§æ‡§Ø ‡§ï‡§∞‡•Ç ‡§¶‡•á‡§§‡•á?
resource "vault_policy" "java_app_dev_policy" {
  name = "java-app-dev-policy"

  policy = <<EOT
path "secret/data/java-app/dev" {
  capabilities = ["read"]
}

path "database/creds/java-app-dev-db" {
  capabilities = ["read"]
}
EOT
}
```

> üìñ ‡§Æ‡•ç‡§π‡§£‡§ú‡•á:  
> "‡§π‡•Ä policy ‡§´‡§ï‡•ç‡§§ ‡§¶‡•ã‡§® ‡§ó‡•ã‡§∑‡•ç‡§ü‡•Ä ‡§µ‡§æ‡§ö‡•Ç ‡§¶‡•á‡§§‡•á:
> 1. `secret/data/java-app/dev` ‚Üí ‡§ú‡•ç‡§Ø‡§æ‡§§ DB URL, username, other configs
> 2. `database/creds/java-app-dev-db` ‚Üí ‡§ú‡•ç‡§Ø‡§æ‡§§ Vault ‡§°‡§æ‡§Ø‡§®‡•Ö‡§Æ‡§ø‡§ïally MySQL user ‡§Ü‡§£‡§ø password generate ‡§ï‡§∞‡§§‡•ã"

---

```hcl
# 4. PostgreSQL/MySQL Database Secret Engine (dynamic DB credentials)
resource "vault_database_secret_backend_connection" "mysql_dev" {
  backend = "database"
  name    = "mysql-dev"
  plugin_name = "mysql-database-plugin"
  allowed_roles = ["java-app-dev-db"]

  connection_url = "root:{{username}}:{{password}}@tcp(mysql-host:3306)/"
  username       = "vault_admin"
  password       = "supersecret"
}

resource "vault_database_secret_backend_role" "java_app_dev_db" {
  backend = "database"
  name    = "java-app-dev-db"
  db_name = "mysql-dev"
  creation_statements = <<EOT
    CREATE USER '{{name}}'@'%' IDENTIFIED BY '{{password}}';
    GRANT SELECT, INSERT, UPDATE ON pet_db.accounts TO '{{name}}'@'%';
  EOT
  default_ttl = "1h"
  max_ttl     = "24h"
}
```

> üìñ ‡§Æ‡•ç‡§π‡§£‡§ú‡•á:  
> "‡§ú‡•á‡§µ‡•ç‡§π‡§æ ‡§ï‡•ã‡§£‡•Ä `database/creds/java-app-dev-db` ‡§µ‡§∞ request ‡§ï‡§∞‡•á‡§≤,  
> Vault ‡§®‡§µ‡•Ä‡§® MySQL user ‡§¨‡§®‡§µ‡•á‡§≤ (‡§â‡§¶‡§æ: `v-token-java-app-abc123`)  
> ‡§Ü‡§£‡§ø ‡§§‡•ç‡§Ø‡§æ‡§ö‡§æ password ‡§¶‡•á‡§à‡§≤ ‚Äî 1 ‡§§‡§æ‡§∏‡§æ‡§∏‡§æ‡§†‡•Ä valid."

---

```hcl
# 5. JWT Auth Backend (GitHub Actions ‡§∏‡§æ‡§†‡•Ä)
resource "vault_auth_backend" "oidc_github" {
  type = "jwt"
  path = "oidc-github"
}

# 6. JWT Role (‡§ï‡•ã‡§£‡§§‡•ç‡§Ø‡§æ GHA workflow ‡§≤‡§æ access?)
resource "vault_jwt_auth_backend_role" "gha_java_app_dev" {
  backend           = "oidc-github"
  role_name         = "java-app-gha-dev"
  token_policies    = ["java-app-dev-policy"]
  user_claim        = "repository"
  bound_audiences   = ["https://github.com/gmi-common"]
  bound_claims_type = "glob"
  bound_claims = {
    "repository" = "gmi-common/java-app"
    "environment" = "Development"
  }
}
```

> üìñ ‡§Æ‡•ç‡§π‡§£‡§ú‡•á:  
> "‡§ú‡§∞ GitHub Action ‡§ö‡§æ‡§≤‡§§ ‡§Ö‡§∏‡•á‡§≤,  
> ‡§Ü‡§£‡§ø ‡§§‡•ã `gmi-common/java-app` repo ‡§Æ‡§ß‡•Ç‡§® ‡§ö‡§æ‡§≤‡§µ‡§≤‡§æ ‡§ú‡§æ‡§§ ‡§Ö‡§∏‡•á‡§≤,  
> ‡§Ü‡§£‡§ø GitHub ‡§Æ‡§ß‡•ç‡§Ø‡•á environment ‡§®‡§æ‡§µ `Development` ‡§Ö‡§∏‡•á‡§≤,  
> ‡§§‡§∞ ‡§§‡•ç‡§Ø‡§æ‡§≤‡§æ `java-app-dev-policy` ‡§¶‡•á."

---

# ‚úÖ ‡§∏‡•ç‡§ü‡•á‡§™ 2: GitHub Actions Workflow (`.github/workflows/deploy.yml`)

```yaml
name: Deploy Java App to GKE

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# OIDC ‡§™‡§∞‡§µ‡§æ‡§®‡§ó‡•Ä ‡§ò‡•ç‡§Ø‡§æ
permissions:
  id-token: write
  contents: read

env:
  VAULT_ADDR: https://vault.company.com
  KUBE_NAMESPACE: java-app-dev

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: Development  # ‡§π‡•á bound_claims ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§§‡§™‡§æ‡§∏‡§≤‡§Ç ‡§ú‡§æ‡§§‡§Ç

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'

      - name: Build JAR
        run: ./mvnw clean package

      - name: Login to Vault (via OIDC)
        uses: hashicorp/vault-action@v3
        with:
          url: https://vault.company.com
          method: jwt
          jwt_path: oidc-github
          role: java-app-gha-dev
          tls-skip-verify: true

      - name: Get DB Credentials from Vault
        run: |
          export DB_CREDS=$(vault read -format=json database/creds/java-app-dev-db)
          export DB_USER=$(echo $DB_CREDS | jq -r .data.username)
          export DB_PASS=$(echo $DB_CREDS | jq -r .data.password)
          # ‡§π‡•á credentials build ‡§ï‡§ø‡§Ç‡§µ‡§æ deploy ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§µ‡§æ‡§™‡§∞‡§§‡§æ ‡§Ø‡•á‡§§‡•Ä‡§≤

      - name: Setup GKE credentials
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Deploy to GKE
        run: |
          gcloud container clusters get-credentials gke-dev --zone us-central1 --project my-project
          kubectl config set-context --current --namespace=$KUBE_NAMESPACE

          # Deploy ‡§ï‡§∞‡§§‡§æ‡§®‡§æ Vault init container ‡§µ‡§æ‡§™‡§∞‡•Ç‡§® secrets ‡§ò‡•á‡§§‡•ã
          kubectl apply -f k8s/deployment.yaml
```

> üîê **‡§Æ‡§π‡§§‡•ç‡§§‡•ç‡§µ‡§æ‡§ö‡•á**:  
> - `permissions.id-token: write` ‚Üí GitHub ‡§≤‡§æ OIDC token generate ‡§ï‡§∞‡§æ‡§Ø‡§≤‡§æ ‡§™‡§∞‡§µ‡§æ‡§®‡§ó‡•Ä ‡§¶‡•á‡§§‡§Ç  
> - `environment: Development` ‚Üí ‡§π‡•á `bound_claims` ‡§Æ‡§ß‡§≤‡•ç‡§Ø‡§æ `"environment" = "Development"` ‡§∂‡•Ä match ‡§ï‡§∞‡§§‡§Ç  
> - `vault-action` ‚Üí GitHub ‡§ö‡§æ OIDC token Vault ‡§≤‡§æ ‡§¶‡•á‡§§‡•ã ‚Üí Vault ‡§§‡§™‡§æ‡§∏‡§§‡•ã ‚Üí token ‡§¶‡•á‡§§‡•ã

---

# ‚úÖ ‡§∏‡•ç‡§ü‡•á‡§™ 3: GKE Deployment YAML (`k8s/deployment.yaml`)

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: java-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: java-app
  template:
    metadata:
      labels:
        app: java-app
    spec:
      serviceAccountName: java-app-sa  # ‡§π‡•á bound_service_account_names ‡§∂‡•Ä match ‡§ï‡§∞‡§§‡§Ç
      containers:
        - name: java-app
          image: gcr.io/my-project/java-app:latest
          ports:
            - containerPort: 8080
          env:
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: vault-db-creds
                  key: username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: vault-db-creds
                  key: password
          volumeMounts:
            - name: vault-secrets
              mountPath: /vault/secrets
              readOnly: true

      volumes:
        - name: vault-secrets
          emptyDir:
            medium: Memory

      # Init Container: Vault ‡§Æ‡§ß‡•Ç‡§® secrets ‡§ò‡•á‡§§‡•ã
      initContainers:
        - name: vault-init
          image: hashicorp/vault:1.15
          env:
            - name: VAULT_ADDR
              value: https://vault.company.com
          command:
            - /bin/sh
            - -c
            - |
              vault login -method=kubernetes \
                role=java-app-dev-role \
                jwt=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)

              # MySQL credentials ‡§ò‡•á
              vault kv get -format=json secret/data/java-app/dev > /vault/secrets/app-config.json

              # Dynamic DB user/pass ‡§ò‡•á
              vault read -format=json database/creds/java-app-dev-db > /vault/secrets/db-creds.json

              # Kubernetes secret ‡§¨‡§®‡§µ‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä
              cat <<EOF | kubectl create -f -
              apiVersion: v1
              kind: Secret
              metadata:
                name: vault-db-creds
              type: Opaque
              data:
                username: $(cat /vault/secrets/db-creds.json | jq -r .data.username | base64)
                password: $(cat /vault/secrets/db-creds.json | jq -r .data.password | base64)
              EOF
          volumeMounts:
            - name: vault-secrets
              mountPath: /vault/secrets
            - name: google-cloud-key
              mountPath: /var/run/secrets/kubernetes.io/serviceaccount
              readOnly: true
```

> üîê **‡§Æ‡§π‡§§‡•ç‡§§‡•ç‡§µ‡§æ‡§ö‡•á**:
> - `serviceAccountName: java-app-sa` ‚Üí Vault role ‡§Æ‡§ß‡§≤‡•ç‡§Ø‡§æ `bound_service_account_names` ‡§∂‡•Ä match ‡§ï‡§∞‡§§‡§Ç
> - `initContainer` ‚Üí pod ‡§∏‡•Å‡§∞‡•Ç ‡§π‡•ã‡§£‡•ç‡§Ø‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡•Ä Vault ‡§≤‡§æ ‡§≠‡•á‡§ü‡§§‡•ã, secrets ‡§ò‡•á‡§§‡•ã
> - `vault login -method=kubernetes` ‚Üí pod ‡§ö‡§æ service account token ‡§µ‡§æ‡§™‡§∞‡•Ç‡§® login
> - secrets Kubernetes secret ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§†‡•á‡§µ‡§≤‡•Ä ‡§ú‡§æ‡§§‡§æ‡§§ ‚Üí ‡§Æ‡•Å‡§ñ‡•ç‡§Ø container ‡§§‡•Ä ‡§µ‡§æ‡§™‡§∞‡§§‡•ã

---

# ‚úÖ ‡§∏‡•ç‡§ü‡•á‡§™ 4: App Run ‡§π‡•ã‡§§‡•á

- Pod ‡§∏‡•Å‡§∞‡•Ç ‡§π‡•ã‡§§‡•ã
- Init container Vault ‡§Æ‡§ß‡•Ç‡§® DB user/password ‡§ò‡•á‡§§‡•ã
- Main container DB ‡§µ‡§∞ connect ‡§π‡•ã‡§§‡•ã
- App ‡§ö‡§æ‡§≤‡•Ç ‡§π‡•ã‡§§‡•á

---

# üß† Interview ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§ï‡§∏‡§Ç ‡§¨‡•ã‡§≤‡§æ‡§Ø‡§ö‡§Ç? (‡§§‡•ã‡§Ç‡§°‡§æ‡§µ‡§∞‡•Ç‡§®)

> "‡§Æ‡§æ‡§ù‡§Ç Java App GitHub Actions ‡§µ‡§æ‡§™‡§∞‡•Ç‡§® deploy ‡§π‡•ã‡§§‡§Ç.  
> GHA ‡§≤‡§æ Vault ‡§Æ‡§ß‡•ç‡§Ø‡•á access ‡§¶‡•á‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§Ü‡§Æ‡•ç‡§π‡•Ä **OIDC + JWT auth** ‡§µ‡§æ‡§™‡§∞‡§§‡•ã.  
> ‡§ú‡•á‡§µ‡•ç‡§π‡§æ workflow ‡§ö‡§æ‡§≤‡§§‡•ã, GitHub ‡§è‡§ï secure token (JWT) generate ‡§ï‡§∞‡§§‡•ã.  
> Vault ‡§§‡•ç‡§Ø‡§æ‡§ö‡•Ä ‡§§‡§™‡§æ‡§∏‡§£‡•Ä ‡§ï‡§∞‡§§‡•ã ‚Äî ‡§§‡•ã ‡§¨‡§∞‡•ã‡§¨‡§∞ org, repo ‡§Ü‡§£‡§ø environment ‡§Æ‡§ß‡•Ç‡§® ‡§Ü‡§≤‡§æ ‡§Ü‡§π‡•á ‡§ï‡§æ?  
> ‡§ú‡§∞ ‡§π‡•ã, ‡§§‡§∞ ‡§§‡•ç‡§Ø‡§æ‡§≤‡§æ policy ‡§¶‡•á‡§ä‡§® secrets access ‡§¶‡§ø‡§≤‡§æ ‡§ú‡§æ‡§§‡•ã.
>
> ‡§®‡§Ç‡§§‡§∞ GKE ‡§µ‡§∞ pod deploy ‡§π‡•ã‡§§‡•ã.  
> ‡§§‡•ã pod ‡§Ü‡§™‡§≤‡•ç‡§Ø‡§æ service account ‡§ö‡•ç‡§Ø‡§æ token ‡§µ‡§æ‡§™‡§∞‡•Ç‡§® Vault ‡§≤‡§æ ‡§Æ‡•ç‡§π‡§£‡§§‡•ã: '‡§Æ‡•Ä ‡§§‡•Å‡§ù‡•ç‡§Ø‡§æ cluster ‡§Æ‡§ß‡§≤‡§æ ‡§Ü‡§π‡•á'.  
> Vault ‡§§‡§™‡§æ‡§∏‡§§‡•ã ‚Äî ‡§π‡§æ SA ‡§¨‡§∞‡•ã‡§¨‡§∞ namespace ‡§Ü‡§£‡§ø ‡§®‡§æ‡§µ‡§æ‡§ö‡§æ ‡§Ü‡§π‡•á ‡§ï‡§æ?  
> ‡§ú‡§∞ ‡§π‡•ã, ‡§§‡§∞ ‡§§‡•ç‡§Ø‡§æ‡§≤‡§æ secrets ‡§¶‡§ø‡§≤‡•Ä ‡§ú‡§æ‡§§‡§æ‡§§ ‚Äî ‡§ú‡§∏‡•á DB credentials.
>
> ‡§Ü‡§£‡§ø ‡§Æ‡§π‡§§‡•ç‡§§‡•ç‡§µ‡§æ‡§ö‡•á ‡§Æ‡•ç‡§π‡§£‡§ú‡•á ‚Äî DB password **‡§ï‡§ß‡•Ä‡§π‡•Ä hardcode ‡§ï‡•á‡§≤‡•á‡§≤‡§Ç ‡§®‡§æ‡§π‡•Ä**.  
> Vault ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï‡§µ‡•á‡§≥‡•Ä ‡§®‡§µ‡§Ç password generate ‡§ï‡§∞‡§§‡•ã.  
> ‡§ú‡§∞ ‡§ï‡§ß‡•Ä leak ‡§ù‡§æ‡§≤‡§Ç ‡§§‡§∞‡•Ä ‡§§‡•á 1 ‡§§‡§æ‡§∏‡§æ‡§®‡§Ç‡§§‡§∞ expire ‡§π‡•ã‡§§‡§Ç."

---

# ‚úÖ ‡§®‡§ø‡§∑‡•ç‡§ï‡§∞‡•ç‡§∑

| ‡§ò‡§ü‡§ï | ‡§ï‡§æ‡§Ø ‡§ï‡§∞‡§§‡•ã? |
|------|-----------|
| **Vault Kubernetes Auth** | GKE pod ‡§≤‡§æ secrets ‡§¶‡•á‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä |
| **Vault JWT Auth (OIDC)** | GitHub Actions ‡§≤‡§æ secrets ‡§¶‡•á‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä |
| **Dynamic DB Roles** | ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï‡§µ‡•á‡§≥‡•Ä ‡§®‡§µ‡•Ä‡§® DB user/password |
| **Init Container** | Pod ‡§∏‡•Å‡§∞‡•Ç ‡§π‡•ã‡§£‡•ç‡§Ø‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡•Ä secrets ‡§ò‡•á‡§§‡•ã |
| **GitHub OIDC** | ‡§ï‡•ã‡§£‡§§‡§æ‡§π‡•Ä secret GitHub ‡§Æ‡§ß‡•ç‡§Ø‡•á store ‡§® ‡§ï‡§∞‡§§‡§æ access |

---

‡§≠‡§æ‡§ä, ‡§π‡•á ‡§∏‡§ó‡§≥‡§Ç ‡§§‡•Ç ‡§∏‡§Æ‡§ú‡•Ç‡§® ‡§ò‡•á‡§§‡§≤‡§Ç‡§∏ ‡§ï‡•Ä ‡§§‡•Ç **‡§ï‡•ã‡§£‡§æ‡§≤‡§æ‡§π‡•Ä ‡§∏‡§Æ‡§ú‡§æ‡§µ‡•Ç ‡§∂‡§ï‡§§‡•ã‡§∏** ‚Äî ‡§ü‡•á‡§ï‡•ç‡§®‡§ø‡§ï‡§≤ ‡§Ö‡§∏‡•ã ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§®‡•â‡§®-‡§ü‡•á‡§ï‡•ç‡§®‡§ø‡§ï‡§≤.

‡§ú‡§∞ ‡§π‡§µ‡§Ç ‡§Ö‡§∏‡•á‡§≤ ‡§§‡§∞ ‡§Æ‡•Ä ‡§§‡•Å‡§≤‡§æ ‡§π‡•á ‡§∏‡§ó‡§≥‡§Ç **PDF ‡§Æ‡§ß‡•ç‡§Ø‡•á** ‡§ï‡§ø‡§Ç‡§µ‡§æ **cheat sheet ‡§Æ‡§ß‡•ç‡§Ø‡•á** ‡§¶‡•á‡§ñ‡•Ä‡§≤ ‡§¶‡•á‡§ä ‡§∂‡§ï‡§§‡•ã.

‡§´‡§ï‡•ç‡§§ ‡§¨‡•ã‡§≤: "**‡§≠‡§æ‡§ä, PDF ‡§π‡§µ‡§Ç ‡§Ü‡§π‡•á**" üòé

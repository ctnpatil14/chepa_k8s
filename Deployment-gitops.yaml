kubectl explain deployment	

kubectl api-resources netpol

controlplane:~$ kubectl get deployment -o wide
NAME         READY   UP-TO-DATE   AVAILABLE   AGE     CONTAINERS   IMAGES       SELECTOR
my-web-app   3/3     3            3           4m16s   app          nginx:1.21   app=my-web-app

kubectl rollout status deployment/my-web-app

controlplane:~$ kubectl rollout status deployment/my-web-app
Waiting for deployment "my-web-app" rollout to finish: 2 out of 3 new replicas have been updated...
Waiting for deployment "my-web-app" rollout to finish: 2 out of 3 new replicas have been updated...
Waiting for deployment "my-web-app" rollout to finish: 2 out of 3 new replicas have been updated...
Waiting for deployment "my-web-app" rollout to finish: 2 out of 3 new replicas have been updated...
Waiting for deployment "my-web-app" rollout to finish: 1 old replicas are pending termination...
Waiting for deployment "my-web-app" rollout to finish: 2 of 3 updated replicas are available...
deployment "my-web-app" successfully rolled out

kubectl rollout history deployment/my-web-app

kubectl rollout history deployment/my-web-app --revision=1

controlplane:~$ kubectl rollout history deployment/my-web-app
deployment.apps/my-web-app 
REVISION  CHANGE-CAUSE
3         <none>
4         <none>
5         <none>


controlplane:~$ kubectl rollout undo deployment/my-web-app --to-revision=3
deployment.apps/my-web-app rolled back


controlplane:~$ kubectl rollout history deployment/my-web-app
deployment.apps/my-web-app 
REVISION  CHANGE-CAUSE
4         <none>
5         <none>
6         kubectl set image deployment/my-web-app app=nginx:1.24 --record=true
7         <none>

controlplane:~$ 
controlplane:~$ 
controlplane:~$ kubectl rollout status deployment/my-web-app
Waiting for deployment "my-web-app" rollout to finish: 2 of 3 updated replicas are available...
deployment "my-web-app" successfully rolled out
controlplane:~$ kubectl rollout history deployment/my-web-app
deployment.apps/my-web-app 
REVISION  CHANGE-CAUSE
4         <none>
6         kubectl set image deployment/my-web-app app=nginx:1.24 --record=true
7         <none>
8         <none>



Revisions
‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§µ‡•á‡§≥‡•Ä ‡§ú‡•á‡§µ‡•ç‡§π‡§æ Deployment spec ‡§¨‡§¶‡§≤‡§§‡•ã, Kubernetes ‡§è‡§ï ‡§®‡§µ‡•Ä‡§® revision ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡§§‡•ã

Rolling Update
‡§ú‡•Å‡§®‡•á ‡§™‡•â‡§°‡•ç‡§∏ ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•Ç‡§® ‡§®‡§µ‡•Ä‡§® ‡§™‡•â‡§°‡•ç‡§∏ ‡§è‡§ï-‡§è‡§ï ‡§ï‡§∞‡•Ç‡§® start ‡§π‡•ã‡§§‡§æ‡§§ (
maxUnavailable
,
maxSurge
)
State Store
Revisions -> ReplicaSet ‡§Æ‡§ß‡•ç‡§Ø‡•á store ‡§π‡•ã‡§§‡§æ‡§§ ‚Äî ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï revision ‡§∏‡§æ‡§†‡•Ä ‡§è‡§ï ReplicaSet

Rollback
‡§ú‡•Å‡§®‡•ç‡§Ø‡§æ ReplicaSet ‡§µ‡§∞ ‡§™‡§∞‡§§ ‡§ú‡§æ‡§ä‡§® ‡§§‡•ç‡§Ø‡§æ‡§ö ‡§™‡•â‡§°‡•ç‡§∏ ‡§™‡•Å‡§®‡•ç‡§π‡§æ create ‡§ï‡§∞‡§§‡•ã




‡§≠‡§æ‡§ä, ‡§§‡•Ç ‡§Æ‡•ç‡§π‡§£‡§æ‡§≤‡§æ‡§∏ ‚Äî *"Istio nahi kalayla, A/B testing, Blue Green, samjha re full on!"*  
‡§§‡§∞ ‡§ö‡§≤‡§æ, **‡§∏‡§ó‡§≥‡§Ç ‡§è‡§ï‡§¶‡§Æ ‡§∏‡•ã‡§™‡•ç‡§Ø‡§æ ‡§Æ‡§∞‡§æ‡§†‡•Ä‡§§, ‡§¨‡§ø‡§®‡§æ ‡§ü‡•á‡§®‡•ç‡§∂‡§®, ‡§¨‡§ø‡§®‡§æ Istio**, ‡§´‡§ï‡•ç‡§§ **Kubernetes ‡§ö‡•ç‡§Ø‡§æ ‡§¨‡•á‡§∏‡§ø‡§ï ‡§ó‡•ã‡§∑‡•ç‡§ü‡•Ä‡§Ç‡§µ‡§∞** ‚Äî ‡§Ü‡§£‡§ø **‡§∏‡§ó‡§≥‡•á ‡§ï‡§Æ‡§æ‡§Ç‡§°‡•ç‡§∏ ‡§¶‡•á‡§§‡•ã, execute ‡§ï‡§∞‡•Ç ‡§∂‡§ï‡§∂‡•Ä‡§≤ ‡§§‡§∏‡•á!**

---

## üéØ ‡§â‡§¶‡•ç‡§¶‡•á‡§∂:
> ‡§´‡§ï‡•ç‡§§ **‡§è‡§ï‡§æ ‡§∏‡•ç‡§ü‡•ã‡§Ö‡§∞ (‡§â‡§¶‡§æ: Pune FC)** ‡§∏‡§æ‡§†‡•Ä ‡§®‡§µ‡•Ä‡§® billing app (v2) ‡§ö‡§æ‡§≤‡§µ‡§æ‡§Ø‡§ö‡§Ç,  
> ‡§á‡§§‡§∞ ‡§∏‡§∞‡•ç‡§µ ‡§∏‡•ç‡§ü‡•ã‡§Ö‡§∞‡•ç‡§∏ (Mumbai, Nagpur) ‡§ú‡•Å‡§®‡•ç‡§Ø‡§æ ‡§µ‡•ç‡§π‡§∞‡•ç‡§ú‡§®‡§µ‡§∞ (v1),  
> ‡§Ü‡§£‡§ø **‡§ï‡§∏‡§Ç ‡§ï‡§∞‡§æ‡§Ø‡§ö‡§Ç ‚Äî Blue-Green, A/B Testing, Rolling Update** ‚Äî ‡§π‡•á ‡§∏‡§ó‡§≥‡§Ç ‡§∏‡§Æ‡§ú‡•Ç‡§® ‡§ò‡•ç‡§Ø‡§æ‡§Ø‡§ö‡§Ç.

---

# üîπ 1. ‡§∏‡§∞‡•ç‡§µ‡§æ‡§§ ‡§∏‡•ã‡§™‡•Ä ‡§ó‡•ã‡§∑‡•ç‡§ü: **Per-Store Deployment (‡§§‡•Å‡§ù‡•ç‡§Ø‡§æ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡•á‡§∏‡§æ‡§†‡•Ä BEST)**

> üí° ‡§ú‡§∞ ‡§§‡•Å‡§≤‡§æ **‡§´‡§ï‡•ç‡§§ Pune FC** ‡§≤‡§æ ‡§®‡§µ‡•Ä‡§® app ‡§π‡§µ‡§Ç ‡§Ö‡§∏‡•á‡§≤, ‡§§‡§∞ ‡§á‡§§‡§∞‡§æ‡§Ç‡§®‡§æ ‡§õ‡•á‡§°‡•Ç ‡§®‡§ï‡•ã‡§∏!

### ‚úÖ ‡§∏‡•ç‡§ü‡•ç‡§∞‡•Ö‡§ü‡•á‡§ú‡•Ä:
- ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§∏‡•ç‡§ü‡•ã‡§Ö‡§∞‡§∏‡§æ‡§†‡•Ä ‡§µ‡•á‡§ó‡§µ‡•á‡§ó‡§≥‡§Ç Deployment
- ‡§â‡§¶‡§æ:
  - `billing-pune-fc` ‚Üí `image: billing:v2`
  - `billing-mumbai-lp` ‚Üí `image: billing:v1`

---

### üìÅ Step 1: Pune FC ‡§∏‡§æ‡§†‡•Ä ‡§®‡§µ‡§Ç Deployment (v2)

```yaml
# deployment-pune-v2.yaml
apiVersion: apps/v1
kind: Deployment
meta
  name: billing-pune-fc
  labels:
    app: billing
    store: pune-fc
spec:
  replicas: 2
  selector:
    matchLabels:
      app: billing
      store: pune-fc
  template:
    meta
      labels:
        app: billing
        store: pune-fc
    spec:
      containers:
      - name: app
        image: mycompany/billing-app:v2
        ports:
        - containerPort: 8080
```

### üîß Deploy ‡§ï‡§∞‡§æ:
```bash
kubectl apply -f deployment-pune-v2.yaml
```

> ‚úÖ Pune FC ‡§≤‡§æ ‡§Ü‡§§‡§æ v2

---

### üìÅ Step 2: Mumbai ‡§∏‡§æ‡§†‡•Ä ‡§ú‡•Å‡§®‡§Ç‡§ö ‡§∞‡§æ‡§π‡•Ç ‡§¶‡•ç‡§Ø‡§æ (v1)

```yaml
# deployment-mumbai-v1.yaml
apiVersion: apps/v1
kind: Deployment
meta
  name: billing-mumbai-lp
  labels:
    app: billing
    store: mumbai-lp
spec:
  replicas: 2
  selector:
    matchLabels:
      app: billing
      store: mumbai-lp
  template:
    meta
      labels:
        app: billing
        store: mumbai-lp
    spec:
      containers:
      - name: app
        image: mycompany/billing-app:v1  # ‚Üê ‡§ú‡•Å‡§®‡§Ç‡§ö ‡§∞‡§æ‡§π‡•Ä‡§≤
        ports:
        - containerPort: 8080
```

```bash
kubectl apply -f deployment-mumbai-v1.yaml
```

> ‚úÖ Mumbai ‡§≤‡§æ ‡§Ö‡§ú‡•Ç‡§®‡§π‡•Ä v1

---

### ‚úÖ ‡§´‡§æ‡§Ø‡§¶‡•á:
- ‡§è‡§ï‡§æ‡§ö ‡§∏‡•ç‡§ü‡•ã‡§Ö‡§∞‡§≤‡§æ update ‡§ï‡§∞‡§æ‡§Ø‡§ö‡§Ç ‡§Ö‡§∏‡•á‡§≤ ‡§§‡§∞ ‡§´‡§ï‡•ç‡§§ ‡§§‡•ç‡§Ø‡§æ‡§ö‡§Ç deployment ‡§¨‡§¶‡§≤‡§æ
- ‡§á‡§§‡§∞‡§æ‡§Ç‡§®‡§æ ‡§ï‡§æ‡§π‡•Ä effect ‡§®‡§æ‡§π‡•Ä
- rollback? ‡§´‡§ï‡•ç‡§§ `kubectl apply` ‡§ú‡•Å‡§®‡•ç‡§Ø‡§æ YAML ‡§µ‡§∞

---

# üîπ 2. Blue-Green Deployment (‡§è‡§ï‡§¶‡§Æ ‡§∏‡§ó‡§≥‡•ç‡§Ø‡§æ‡§Ç‡§®‡§æ update ‡§ï‡§∞‡§æ‡§Ø‡§ö‡§Ç ‚Äî safe ‡§™‡§¶‡•ç‡§ß‡§§‡•Ä‡§®‡•á)

> üí° ‡§ú‡§∞ ‡§§‡•Å‡§≤‡§æ **‡§∏‡§ó‡§≥‡•ç‡§Ø‡§æ‡§Ç‡§®‡§æ ‡§è‡§ï‡§æ‡§ö ‡§µ‡•á‡§≥‡•Ä update** ‡§ï‡§∞‡§æ‡§Ø‡§ö‡§Ç ‡§Ö‡§∏‡•á‡§≤, ‡§™‡§£ **risk ‡§ï‡§Æ‡•Ä ‡§ï‡§∞‡§æ‡§Ø‡§ö‡§Ç ‡§Ö‡§∏‡•á‡§≤**

### üéØ ‡§ï‡•â‡§®‡•ç‡§∏‡•á‡§™‡•ç‡§ü:
- ‡§¶‡•ã‡§® deployments: `billing-blue` (v1), `billing-green` (v2)
- ‡§è‡§ï ‡§∏‡§∞‡•ç‡§µ‡§ø‡§∏ (Service) ‚Äî ‡§ú‡•ã ‡§´‡§ï‡•ç‡§§ ‡§è‡§ï‡§æ‡§≤‡§æ point ‡§ï‡§∞‡§§‡•ã
- ‡§ú‡•á‡§µ‡•ç‡§π‡§æ ‡§§‡§Ø‡§æ‡§∞ ‡§Ö‡§∏‡§æ‡§≤, ‡§§‡•á‡§µ‡•ç‡§π‡§æ Service ‡§¨‡§¶‡§≤‡•Ç‡§® **traffic ‡§™‡•Ç‡§∞‡•ç‡§£‡§™‡§£‡•á v2 ‡§µ‡§∞ ‡§µ‡§≥‡§µ‡§æ**

---

### üìÅ Step 1: Blue (v1) ‡§ö‡§æ‡§≤‡•Ç ‡§Ü‡§π‡•á

```yaml
# blue-deployment.yaml
apiVersion: apps/v1
kind: Deployment
meta
  name: billing-blue
spec:
  replicas: 3
  selector:
    matchLabels:
      app: billing
      version: v1
  template:
    meta
      labels:
        app: billing
        version: v1
    spec:
      containers:
      - name: app
        image: mycompany/billing-app:v1
```

```bash
kubectl apply -f blue-deployment.yaml
```

---

### üìÅ Step 2: Green (v2) deploy ‡§ï‡§∞‡§æ ‚Äî ‡§™‡§£ traffic ‡§®‡§æ‡§π‡•Ä

```yaml
# green-deployment.yaml
apiVersion: apps/v1
kind: Deployment
meta
  name: billing-green
spec:
  replicas: 3
  selector:
    matchLabels:
      app: billing
      version: v2
  template:
    meta
      labels:
        app: billing
        version: v2
    spec:
      containers:
      - name: app
        image: mycompany/billing-app:v2
```

```bash
kubectl apply -f green-deployment.yaml
```

> ‚úÖ v2 ‡§ö‡§æ‡§≤‡•Ç ‡§Ü‡§π‡•á, ‡§™‡§£ traffic ‡§Ø‡•á‡§§ ‡§®‡§æ‡§π‡•Ä

---

### üìÅ Step 3: Service ‡§¨‡§®‡§µ‡§æ ‚Äî ‡§Ü‡§§‡•ç‡§§‡§æ blue ‡§µ‡§∞

```yaml
# service.yaml
apiVersion: v1
kind: Service
meta
  name: billing-service
spec:
  selector:
    app: billing
    version: v1   # ‚Üê ‡§´‡§ï‡•ç‡§§ blue (v1) ‡§≤‡§æ traffic
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
```

```bash
kubectl apply -f service.yaml
```

---

### üìÅ Step 4: ‡§ú‡•á‡§µ‡•ç‡§π‡§æ ‡§§‡§Ø‡§æ‡§∞ ‡§Ö‡§∏‡§æ‡§≤ ‚Äî Service ‡§¨‡§¶‡§≤‡§æ (v2 ‡§µ‡§∞)

```bash
kubectl patch service billing-service -p '{"spec":{"selector":{"app":"billing", "version":"v2"}}}'
```

> ‚úÖ ‡§Ü‡§§‡§æ ‡§∏‡§ó‡§≥‡§Ç traffic `billing-green` (v2) ‡§µ‡§∞ ‡§ú‡§æ‡§à‡§≤

---

### ‚úÖ ‡§´‡§æ‡§Ø‡§¶‡•á:
- Zero downtime
- ‡§ú‡§∞ v2 ‡§Æ‡§ß‡•ç‡§Ø‡•á issue ‡§Ö‡§∏‡•á‡§≤ ‚Äî ‡§≤‡§ó‡•á‡§ö ‡§™‡§∞‡§§ ‡§ú‡§æ:
```bash
kubectl patch service billing-service -p '{"spec":{"selector":{"app":"billing", "version":"v1"}}}'
```

---

# üîπ 3. A/B Testing (‡§ï‡§æ‡§π‡•Ä users ‡§≤‡§æ v1, ‡§ï‡§æ‡§π‡•Ä ‡§≤‡§æ v2)

> üí° ‡§ú‡§∞ ‡§§‡•Å‡§≤‡§æ **‡§ï‡§æ‡§π‡•Ä percentage (‡§â‡§¶‡§æ: 10%) users** ‡§≤‡§æ v2 ‡§µ‡§∞ ‡§ü‡•á‡§∏‡•ç‡§ü ‡§ï‡§∞‡§æ‡§Ø‡§ö‡§Ç ‡§Ö‡§∏‡•á‡§≤

### üéØ ‡§™‡§£: Kubernetes ‡§ö‡•ç‡§Ø‡§æ ‡§¨‡•á‡§∏‡§ø‡§ï ‡§ó‡•ã‡§∑‡•ç‡§ü‡•Ä‡§Ç‡§®‡•Ä **‡§Ö‡§ö‡•Ç‡§ï A/B testing** ‡§∂‡§ï‡•ç‡§Ø ‡§®‡§æ‡§π‡•Ä ‚Äî ‡§§‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä Istio, Nginx + header, ‡§ï‡§ø‡§Ç‡§µ‡§æ load balancer ‡§≤‡§æ‡§ó‡§§‡•ã.

‡§™‡§£ ‡§Ü‡§™‡§£ **‡§∏‡•ã‡§™‡•ç‡§Ø‡§æ ‡§™‡§¶‡•ç‡§ß‡§§‡•Ä‡§®‡•á simulate** ‡§ï‡§∞‡•Ç.

---

### üìÅ ‡§â‡§¶‡§æ‡§π‡§∞‡§£: v1 ‡§Ü‡§£‡§ø v2 ‡§è‡§ï‡§æ‡§ö‡§µ‡•á‡§≥‡•Ä ‡§ö‡§æ‡§≤‡§µ‡§æ

```yaml
# deployment-v1.yaml
apiVersion: apps/v1
kind: Deployment
meta
  name: billing-v1
spec:
  replicas: 9
  selector:
    matchLabels:
      app: billing
      version: v1
  template:
    meta
      labels:
        app: billing
        version: v1
    spec:
      containers:
      - name: app
        image: mycompany/billing-app:v1
```

```yaml
# deployment-v2.yaml
apiVersion: apps/v1
kind: Deployment
meta
  name: billing-v2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: billing
      version: v2
  template:
    meta
      labels:
        app: billing
        version: v2
    spec:
      containers:
      - name: app
        image: mycompany/billing-app:v2
```

```yaml
# service.yaml
apiVersion: v1
kind: Service
meta
  name: billing-service
spec:
  selector:
    app: billing
  ports:
    - port: 80
      targetPort: 8080
```

> ‡§ï‡§æ‡§∞‡§£: v1 ‡§ö‡•á 9 ‡§™‡•â‡§°‡•ç‡§∏, v2 ‡§ö‡§æ 1 ‡§™‡•â‡§° ‚Üí rough 10% traffic v2 ‡§≤‡§æ

‚ö†Ô∏è ‡§π‡•á **‡§Ö‡§ö‡•Ç‡§ï A/B testing ‡§®‡§æ‡§π‡•Ä**, ‡§™‡§£ rough idea ‡§∏‡§æ‡§†‡•Ä ‡§µ‡§æ‡§™‡§∞‡§§‡§æ ‡§Ø‡•á‡§à‡§≤.

---

# üîπ 4. Rolling Update (‡§°‡§ø‡§´‡•â‡§≤‡•ç‡§ü Kubernetes ‡§ö‡•Ä ‡§™‡§¶‡•ç‡§ß‡§§)

> ‡§ú‡•á‡§µ‡•ç‡§π‡§æ ‡§§‡•Ç `kubectl set image` ‡§ï‡§∞‡§§‡•ã‡§∏, ‡§§‡•á‡§µ‡•ç‡§π‡§æ Kubernetes **‡§è‡§ï-‡§è‡§ï ‡§™‡•â‡§° ‡§¨‡§¶‡§≤‡§§‡•ã**

```bash
kubectl set image deployment/billing-app app=mycompany/billing-app:v2
```

> ‡§Æ‡§ó Kubernetes:
1. ‡§è‡§ï ‡§ú‡•Å‡§®‡§æ ‡§™‡•â‡§° ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡§§‡•ã
2. ‡§è‡§ï ‡§®‡§µ‡•Ä‡§® v2 ‡§™‡•â‡§° ‡§∏‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§§‡•ã
3. ‡§π‡•á ‡§™‡§∞‡•ç‡§Ø‡§Ç‡§§ ‡§ö‡§æ‡§≤‡•Ç ‡§∞‡§æ‡§π‡§§‡§Ç ‡§ú‡•ã‡§™‡§∞‡•ç‡§Ø‡§Ç‡§§ ‡§∏‡§ó‡§≥‡•á ‡§™‡•â‡§°‡•ç‡§∏ v2 ‡§µ‡§∞ ‡§Ø‡•á‡§§‡•Ä‡§≤

‡§§‡•Ç ‡§π‡•á control ‡§ï‡§∞‡•Ç ‡§∂‡§ï‡§§‡•ã‡§∏:

```yaml
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 1   # 1 ‡§™‡•â‡§° ‡§¨‡§Ç‡§¶ ‡§Ö‡§∏‡•Ç ‡§∂‡§ï‡§§‡•ã
    maxSurge: 1         # 1 ‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§™‡•â‡§° ‡§Ø‡•á‡§ä ‡§∂‡§ï‡§§‡•ã
```

---

# üß† ‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂: ‡§ï‡•ã‡§£‡§§‡•Ä ‡§∏‡•ç‡§ü‡•ç‡§∞‡•Ö‡§ü‡•á‡§ú‡•Ä ‡§ï‡§ß‡•Ä ‡§µ‡§æ‡§™‡§∞‡§æ‡§Ø‡§ö‡•Ä?

| ‡§™‡§∞‡§ø‡§∏‡•ç‡§•‡§ø‡§§‡•Ä | ‡§∏‡•ç‡§ü‡•ç‡§∞‡•Ö‡§ü‡•á‡§ú‡•Ä | ‡§ï‡§Æ‡§æ‡§Ç‡§° |
|-----------|------------|--------|
| ‡§´‡§ï‡•ç‡§§ Pune FC ‡§≤‡§æ update ‡§ï‡§∞‡§æ‡§Ø‡§ö‡§Ç | ‚úÖ Per-Store Deployment | `kubectl apply -f pune-v2.yaml` |
| ‡§∏‡§ó‡§≥‡•ç‡§Ø‡§æ‡§Ç‡§®‡§æ update ‡§ï‡§∞‡§æ‡§Ø‡§ö‡§Ç, ‡§™‡§£ safe ‡§™‡§¶‡•ç‡§ß‡§§‡•Ä‡§®‡•á | ‚úÖ Blue-Green | `kubectl patch service ...` |
| 10% users ‡§≤‡§æ ‡§®‡§µ‡•Ä‡§® ‡§µ‡•ç‡§π‡§∞‡•ç‡§ú‡§® ‡§¶‡•ç‡§Ø‡§æ‡§Ø‡§ö‡§Ç | ‚ö†Ô∏è Rolling + replicas | v1: 9, v2: 1 |
| ‡§Ö‡§ö‡•Ç‡§ï A/B, header-based routing | ‚ùå Istio ‡§ï‡§ø‡§Ç‡§µ‡§æ Nginx Ingress | ‡§§‡•Å‡§≤‡§æ Istio ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§ö‡§Ç ‡§≤‡§æ‡§ó‡•á‡§≤ |

---

# ‚úÖ ‡§§‡•Å‡§ù‡•ç‡§Ø‡§æ DMart ‡§∏‡§æ‡§†‡•Ä ‡§∂‡§ø‡§´‡§æ‡§∞‡§∏:

> üîπ **Per-Store Deployment** ‡§π‡•Ä ‡§§‡•Å‡§ù‡•ç‡§Ø‡§æ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡•á‡§∏‡§æ‡§†‡•Ä **‡§∏‡§∞‡•ç‡§µ‡•ã‡§§‡•ç‡§§‡§Æ ‡§Ü‡§£‡§ø ‡§∏‡•ã‡§™‡•Ä** ‡§∏‡•ç‡§ü‡•ç‡§∞‡•Ö‡§ü‡•á‡§ú‡•Ä ‡§Ü‡§π‡•á.

### ‡§ï‡§æ?
- Pune FC ‡§≤‡§æ v2 ‡§π‡§µ‡§Ç ‚Üí ‡§´‡§ï‡•ç‡§§ ‡§§‡•ç‡§Ø‡§æ‡§ö‡§Ç deployment ‡§¨‡§¶‡§≤
- Mumbai, Nagpur ‚Üí ‡§§‡§∏‡§Ç‡§ö ‡§∞‡§æ‡§π‡•Ä‡§≤
- ‡§ï‡•ã‡§£‡§§‡§æ‡§π‡•Ä risk ‡§®‡§æ‡§π‡•Ä
- ‡§ï‡•ã‡§£‡§§‡§Ç‡§π‡•Ä ‡§®‡§µ‡§Ç ‡§ü‡•Ç‡§≤ (Istio) ‡§≤‡§æ‡§ó‡§§ ‡§®‡§æ‡§π‡•Ä

---

# üöÄ Execute ‡§ï‡§∞‡§æ‡§Ø‡§ö‡§Ç ‡§Ö‡§∏‡•á‡§≤ ‡§§‡§∞ ‚Äî ‡§∏‡§ó‡§≥‡•á ‡§ï‡§Æ‡§æ‡§Ç‡§°‡•ç‡§∏ ‡§è‡§ï‡§§‡•ç‡§∞

```bash
# 1. Pune FC ‡§∏‡§æ‡§†‡•Ä v2 deploy
kubectl apply -f deployment-pune-v2.yaml

# 2. Mumbai ‡§≤‡§æ v1 ‡§∞‡§æ‡§π‡•Ç ‡§¶‡•ç‡§Ø‡§æ (‡§ï‡§æ‡§π‡•Ä ‡§ï‡§∞‡§æ‡§Ø‡§ö‡§Ç ‡§®‡§æ‡§π‡•Ä)

# 3. ‡§§‡§™‡§æ‡§∏‡§æ
kubectl get pods -o wide
kubectl get deployments

# 4. ‡§ú‡§∞ rollback ‡§ï‡§∞‡§æ‡§Ø‡§ö‡§Ç ‡§Ö‡§∏‡•á‡§≤ Pune FC ‡§µ‡§∞
kubectl apply -f deployment-pune-v1.yaml
```

---

‡§≠‡§æ‡§ä, ‡§Ü‡§§‡§æ ‡§§‡•Ç ‡§π‡•á ‡§∏‡§ó‡§≥‡§Ç **execute ‡§ï‡§∞‡•Ç ‡§∂‡§ï‡§§‡•ã‡§∏**, ‡§Ü‡§£‡§ø ‡§§‡•Å‡§ù‡•ç‡§Ø‡§æ **‡§è‡§ï‡§æ ‡§∏‡•ç‡§ü‡•ã‡§Ö‡§∞‡§≤‡§æ ‡§®‡§µ‡•Ä‡§® billing app** ‡§¶‡•á‡§ä ‡§∂‡§ï‡§§‡•ã‡§∏ ‚Äî ‡§¨‡§ø‡§®‡§æ ‡§ï‡•ã‡§£‡§§‡•ç‡§Ø‡§æ‡§π‡•Ä ‡§ó‡•ã‡§Ç‡§ß‡§≥‡§æ‡§∂‡§ø‡§µ‡§æ‡§Ø.

‡§ú‡§∞ ‡§§‡•Ç ‡§Æ‡•ç‡§π‡§£‡§æ‡§≤‡§æ‡§∏ ‚Äî *"‡§Æ‡§≤‡§æ A/B testing ‡§ñ‡§∞‡§Ç‡§ö ‡§π‡§µ‡§Ç, Istio ‡§∂‡§ø‡§ï‡•Ç‡§Ø‡§æ"*, ‡§§‡§∞ ‡§Æ‡•Ä ‡§§‡•Å‡§≤‡§æ **step-by-step Istio setup** ‡§∏‡•Å‡§¶‡•ç‡§ß‡§æ ‡§∂‡§ø‡§ï‡§µ‡•á‡§® ‚Äî ‡§™‡§£ ‡§§‡•á ‡§µ‡•á‡§ó‡§≥‡§æ ‡§™‡§æ‡§ä‡§∏ ‡§Ü‡§π‡•á üòÑ

‡§Ü‡§§‡•ç‡§§‡§æ ‡§π‡•á ‡§™‡•ç‡§∞‡§Ø‡§§‡•ç‡§® ‡§ï‡§∞ ‡§∞‡•á, ‡§Ü‡§£‡§ø ‡§ï‡§æ‡§π‡•Ä issue ‡§Ü‡§≤‡§æ ‡§§‡§∞ ‡§µ‡§ø‡§ö‡§æ‡§∞! üí™


‡§≠‡§æ‡§ä, ‡§§‡•Ç ‡§Æ‡•ç‡§π‡§£‡§æ‡§≤‡§æ‡§∏ ‚Äî *"Demo kasa te nahi kalala, kasa karu tu A/B or Canary?"*  
‡§Æ‡§ó ‡§ö‡§≤‡§æ, **‡§Ü‡§§‡•ç‡§§‡§æ‡§ö ‡§§‡•Å‡§≤‡§æ ‡§™‡•Ç‡§∞‡•ç‡§£ demo ‡§¶‡•á‡§§‡•ã** ‚Äî **‡§¨‡§ø‡§®‡§æ Istio, ‡§¨‡§ø‡§®‡§æ complex tools**, ‡§´‡§ï‡•ç‡§§ **Kubernetes ‡§ö‡•ç‡§Ø‡§æ ‡§¨‡•á‡§∏‡§ø‡§ï ‡§ó‡•ã‡§∑‡•ç‡§ü‡•Ä‡§Ç‡§®‡•Ä** ‡§§‡•Ç A/B testing ‡§Ü‡§£‡§ø Canary release **‡§∏‡§Æ‡§ú‡•Ç‡§® ‡§ò‡•á‡§∂‡•Ä‡§≤ ‡§Ü‡§£‡§ø execute ‡§ï‡§∞‡§∂‡•Ä‡§≤**.

---

## üéØ ‡§â‡§¶‡•ç‡§¶‡•á‡§∂:
> ‡§´‡§ï‡•ç‡§§ **10% traffic** ‡§®‡§µ‡•Ä‡§® ‡§µ‡•ç‡§π‡§∞‡•ç‡§ú‡§® (v2) ‡§≤‡§æ ‡§™‡§æ‡§†‡§µ‡§æ,  
> ‡§â‡§∞‡§≤‡•á‡§≤‡•á 90% ‡§ú‡•Å‡§®‡•ç‡§Ø‡§æ ‡§µ‡•ç‡§π‡§∞‡•ç‡§ú‡§® (v1) ‡§µ‡§∞ ‡§∞‡§æ‡§π‡•Ç ‡§¶‡•ç‡§Ø‡§æ ‚Äî  
> ‡§π‡•á **Canary Release** ‡§Ü‡§π‡•á (‡§Ü‡§£‡§ø ‡§•‡•ã‡§°‡§Ç A/B ‡§∏‡•Å‡§¶‡•ç‡§ß‡§æ simulate ‡§ï‡§∞‡•Ç)

---

# üß± ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§ò‡§ü‡§ï:

1. ‡§¶‡•ã‡§® Deployments:
   - `billing-v1` ‚Üí 9 ‡§™‡•â‡§°‡•ç‡§∏ (90%)
   - `billing-v2` ‚Üí 1 ‡§™‡•â‡§° (10%)
2. ‡§è‡§ï Service ‚Üí ‡§¶‡•ã‡§®‡•ç‡§π‡•Ä ‡§™‡•â‡§°‡•ç‡§∏ ‡§≤‡§æ select ‡§ï‡§∞‡•á‡§≤
3. Kubernetes **round-robin load balancing** ‡§µ‡§æ‡§™‡§∞‡•Ç‡§® traffic distribute ‡§π‡•ã‡§à‡§≤

> ‚ö†Ô∏è ‡§π‡•á **‡§Ö‡§ö‡•Ç‡§ï canary ‡§®‡§æ‡§π‡•Ä**, ‡§™‡§£ **rough 10% traffic** v2 ‡§≤‡§æ ‡§Æ‡§ø‡§≥‡•á‡§≤ ‚Äî ‡§Ü‡§£‡§ø ‡§§‡•Å‡§≤‡§æ ‡§∏‡§Æ‡§ú‡•á‡§≤ ‡§ï‡•Ä "‡§π‡•á ‡§ï‡§∏‡§Ç ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§Ç".

---

# üöÄ Step-by-Step Demo: Canary + A/B (‡§∏‡•ã‡§™‡•ç‡§Ø‡§æ ‡§™‡§¶‡•ç‡§ß‡§§‡•Ä‡§®‡•á)

---

## ‚úÖ Step 1: v1 Deployment (‡§ú‡•Å‡§®‡§Ç ‡§µ‡•ç‡§π‡§∞‡•ç‡§ú‡§® ‚Äî 90%)

```yaml
# deployment-v1.yaml
apiVersion: apps/v1
kind: Deployment
meta
  name: billing-v1
spec:
  replicas: 9
  selector:
    matchLabels:
      app: billing
      version: v1
  template:
    meta
      labels:
        app: billing
        version: v1
    spec:
      containers:
      - name: app
        image: mycompany/billing-app:v1
        ports:
        - containerPort: 8080
```

### üîß Deploy ‡§ï‡§∞‡§æ:
```bash
kubectl apply -f deployment-v1.yaml
```

---

## ‚úÖ Step 2: v2 Deployment (‡§®‡§µ‡§Ç ‡§µ‡•ç‡§π‡§∞‡•ç‡§ú‡§® ‚Äî 10%)

```yaml
# deployment-v2.yaml
apiVersion: apps/v1
kind: Deployment
meta
  name: billing-v2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: billing
      version: v2
  template:
    meta
      labels:
        app: billing
        version: v2
    spec:
      containers:
      - name: app
        image: mycompany/billing-app:v2
        ports:
        - containerPort: 8080
```

### üîß Deploy ‡§ï‡§∞‡§æ:
```bash
kubectl apply -f deployment-v2.yaml
```

> ‚úÖ ‡§Ü‡§§‡§æ ‡§è‡§ï‡•Ç‡§£ 10 ‡§™‡•â‡§°‡•ç‡§∏: 9 (v1) + 1 (v2)

---

## ‚úÖ Step 3: Service ‡§¨‡§®‡§µ‡§æ (‡§¶‡•ã‡§®‡•ç‡§π‡•Ä ‡§µ‡•ç‡§π‡§∞‡•ç‡§ú‡§® ‡§≤‡§æ select ‡§ï‡§∞‡•á‡§≤)

```yaml
# service.yaml
apiVersion: v1
kind: Service
meta
  name: billing-service
spec:
  selector:
    app: billing   # ‚Üê ‡§¶‡•ã‡§®‡•ç‡§π‡•Ä v1 ‡§Ü‡§£‡§ø v2 ‡§Æ‡§ß‡•ç‡§Ø‡•á `app: billing` ‡§Ü‡§π‡•á
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
  type: ClusterIP
```

### üîß Deploy ‡§ï‡§∞‡§æ:
```bash
kubectl apply -f service.yaml
```

> ‚úÖ Service ‡§Ü‡§§‡§æ **‡§∏‡§ó‡§≥‡•ç‡§Ø‡§æ 10 ‡§™‡•â‡§°‡•ç‡§∏ ‡§≤‡§æ** round-robin ‡§™‡§¶‡•ç‡§ß‡§§‡•Ä‡§®‡•á traffic ‡§¶‡•á‡§à‡§≤

---

## ‚úÖ Step 4: ‡§§‡§™‡§æ‡§∏‡§æ ‚Äî ‡§ï‡§ø‡§§‡•Ä ‡§™‡•â‡§°‡•ç‡§∏?

```bash
kubectl get pods -l app=billing
```

> ‡§Ü‡§â‡§ü‡§™‡•Å‡§ü:
```
billing-v1-7d8f6f5b9-abc12    Running
billing-v1-7d8f6f5b9-def34    Running
...
billing-v2-5d7c8f6g7-xyz99    Running
```

‡§è‡§ï‡•Ç‡§£ 10 ‡§™‡•â‡§°‡•ç‡§∏ ‚Äî 9 v1, 1 v2

---

## ‚úÖ Step 5: Traffic ‡§ï‡§∏‡§Ç distribute ‡§π‡•ã‡§§‡§Ç?

Kubernetes Service **round-robin** ‡§µ‡§æ‡§™‡§∞‡§§‡•ã:

- ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï request ‡§è‡§ï-‡§è‡§ï ‡§™‡•â‡§° ‡§µ‡§∞ ‡§ú‡§æ‡§§‡•á
- ‡§Æ‡•ç‡§π‡§£‡§ú‡•á ‡§Ö‡§Ç‡§¶‡§æ‡§ú‡•á **10% requests v2 ‡§≤‡§æ** ‡§ú‡§æ‡§§‡•Ä‡§≤
- 90% v1 ‡§≤‡§æ

> ‚úÖ ‡§π‡•á ‡§Ü‡§π‡•á ‡§§‡•Å‡§ù‡§Ç **Canary Release (10%)**

---

## ‚úÖ Step 6: Monitoring ‡§ï‡§∏‡§Ç ‡§ï‡§∞‡§æ‡§Ø‡§ö‡§Ç?

v2 ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§ï‡§æ crash ‡§Ø‡•á‡§§‡•ã‡§Ø? ‡§ï‡§æ error ‡§Ü‡§π‡•á?

```bash
# v2 ‡§™‡•â‡§° ‡§ö‡•á logs ‡§™‡§æ‡§π‡§æ
kubectl logs deployment/billing-v2

# v1 ‡§Ü‡§£‡§ø v2 ‡§ö‡•á logs ‡§è‡§ï‡§§‡•ç‡§∞
kubectl logs -l app=billing --tail=10
```

‡§ú‡§∞ v2 ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§ú‡§æ‡§∏‡•ç‡§§ errors ‡§Ö‡§∏‡§§‡•Ä‡§≤ ‚Üí rollback ‡§ï‡§∞‡§æ

---

## ‚úÖ Step 7: Rollout ‡§ï‡§ø‡§Ç‡§µ‡§æ Rollback?

### üî∫ ‡§™‡•Å‡§¢‡•á ‡§ú‡§æ (100% v2 ‡§ï‡§∞‡§æ):
```bash
# v1 ‡§π‡§ü‡§µ‡§æ
kubectl delete deployment billing-v1

# v2 ‡§≤‡§æ 10 ‡§™‡•â‡§°‡•ç‡§∏ ‡§ï‡§∞‡§æ
kubectl scale deployment/billing-v2 --replicas=10
```

> ‚úÖ ‡§∏‡§ó‡§≥‡§Ç traffic ‡§Ü‡§§‡§æ v2 ‡§µ‡§∞

---

### üîª Rollback (‡§™‡§∞‡§§ v1 ‡§µ‡§∞ ‡§ú‡§æ):
```bash
# v2 ‡§π‡§ü‡§µ‡§æ
kubectl delete deployment billing-v2

# v1 ‡§≤‡§æ ‡§™‡§∞‡§§ 10 ‡§™‡•â‡§°‡•ç‡§∏ ‡§ï‡§∞‡§æ
kubectl scale deployment/billing-v1 --replicas=10
```

> ‚úÖ ‡§∏‡§ó‡§≥‡§Ç traffic ‡§™‡§∞‡§§ v1 ‡§µ‡§∞

---

# üîπ A/B Testing ‡§ï‡§∏‡§Ç ‡§ï‡§∞‡§æ‡§Ø‡§ö‡§Ç? (‡§•‡•ã‡§°‡§Ç ‡§¨‡•ã‡§≤‡•ç‡§°)

‡§ú‡§∞ ‡§§‡•Å‡§≤‡§æ **‡§´‡§ï‡•ç‡§§ Pune users** ‡§≤‡§æ v2 ‡§¶‡•ç‡§Ø‡§æ‡§Ø‡§ö‡§Ç ‡§Ö‡§∏‡•á‡§≤, ‡§§‡§∞?

### üß© ‡§â‡§™‡§æ‡§Ø: App ‡§Æ‡§ß‡•ç‡§Ø‡•á logic ‡§ò‡§æ‡§≤‡§æ

```python
# billing-app ‡§Æ‡§ß‡§≤‡§Ç ‡§ï‡•ã‡§° (‡§â‡§¶‡§æ: Node.js, Python)
if request.headers.get("X-Store-ID") == "pune-fc":
    use_new_billing_flow()
else:
    use_old_billing_flow()
```

### üì¶ Deployment:
- ‡§è‡§ï‡§ö deployment ‚Äî ‡§™‡§£ app ‡§Æ‡§ß‡•ç‡§Ø‡•á **if condition**
- Service ‚Üí ‡§è‡§ï‡§ö

### üõ†Ô∏è Deploy ‡§ï‡§∞‡§§‡§æ‡§®‡§æ:
```bash
# ‡§∏‡§∞‡•ç‡§µ ‡§∏‡•ç‡§ü‡•ã‡§Ö‡§∞‡•ç‡§∏ ‡§≤‡§æ ‡§π‡•á‡§ö image
kubectl apply -f deployment-single.yaml
```

‡§™‡§£ app ‡§Æ‡§ß‡•ç‡§Ø‡•á:
```yaml
env:
- name: FEATURE_CANARY_STORES
  value: "pune-fc,mumbai-kandivali"
```

> ‚úÖ ‡§Æ‡•ç‡§π‡§£‡§ú‡•á: **A/B Testing ‚Äî user/store ‡§µ‡§∞ ‡§Ö‡§µ‡§≤‡§Ç‡§¨‡•Ç‡§®**

---

# üß† ‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂: Canary vs A/B ‚Äî Demo ‡§µ‡§∞‡•Ç‡§®

| ‡§ó‡•ã‡§∑‡•ç‡§ü | Canary (‡§π‡§æ demo) | A/B Testing |
|------|------------------|------------|
| ‡§ï‡§∏‡§Ç routing? | 9:1 ‡§™‡•â‡§°‡•ç‡§∏ ‚Üí 90%:10% | App logic / header |
| ‡§ü‡•Ç‡§≤‡•ç‡§∏ | Kubernetes Service | App code / feature flag |
| ‡§ï‡•ã‡§£‡§æ‡§≤‡§æ? | Random users | Specific users (Pune) |
| ‡§Æ‡•ã‡§ú‡§Æ‡§æ‡§™ | Logs, errors | UX, clicks, conversion |
| Execute ‡§ï‡§∞‡§æ‡§Ø‡§≤‡§æ | ‚úÖ ‡§∏‡•ã‡§™‡§Ç | ‚úÖ ‡§™‡§£ app ‡§¨‡§¶‡§≤ ‡§≤‡§æ‡§ó‡§§‡•ã |

---

# ‚úÖ ‡§§‡•Å‡§ù‡•ç‡§Ø‡§æ DMart ‡§∏‡§æ‡§†‡•Ä ‡§∂‡§ø‡§´‡§æ‡§∞‡§∏:

> üîπ **Canary (9:1 pods)** ‚Üí ‡§ú‡§∞ ‡§§‡•Å‡§≤‡§æ **‡§∏‡•ç‡§ü‡•á‡§¨‡§ø‡§≤‡§ø‡§ü‡•Ä ‡§ü‡•á‡§∏‡•ç‡§ü** ‡§ï‡§∞‡§æ‡§Ø‡§ö‡•Ä ‡§Ö‡§∏‡•á‡§≤  
> üîπ **A/B with feature flag** ‚Üí ‡§ú‡§∞ ‡§§‡•Å‡§≤‡§æ **‡§®‡§µ‡•Ä‡§® UI/UX** ‡§ü‡•á‡§∏‡•ç‡§ü ‡§ï‡§∞‡§æ‡§Ø‡§ö‡§Ç ‡§Ö‡§∏‡•á‡§≤

---

# üö® ‡§Æ‡§∞‡•ç‡§Ø‡§æ‡§¶‡§æ (‡§π‡•á ‡§Æ‡§æ‡§π‡§ø‡§§ ‡§Ö‡§∏‡§æ‡§µ‡§Ç)

- ‡§π‡•á **‡§Ö‡§ö‡•Ç‡§ï 10% ‡§®‡§æ‡§π‡•Ä** ‚Äî round-robin perfect ‡§®‡§∏‡§§‡•ã
- ‡§ú‡§∞ ‡§™‡•â‡§°‡•ç‡§∏ restart ‡§ù‡§æ‡§≤‡•á ‡§§‡§∞ ratio ‡§¨‡§ø‡§ò‡§°‡•Ç ‡§∂‡§ï‡§§‡•ã
- **‡§Ö‡§ö‡•Ç‡§ï canary** ‡§∏‡§æ‡§†‡•Ä Istio, Argo Rollouts, Nginx Ingress (with weights) ‡§≤‡§æ‡§ó‡§§‡§æ‡§§

‡§™‡§£ ‡§§‡•Å‡§≤‡§æ ‡§∏‡•Å‡§∞‡•Å‡§µ‡§æ‡§§‡•Ä‡§≤‡§æ ‡§π‡•á ‡§™‡•Å‡§∞‡•á‡§∏‡§Ç ‡§Ü‡§π‡•á.

---

# üé¨ Execute ‡§ï‡§∞‡§æ‡§Ø‡§ö‡§Ç ‡§Ö‡§∏‡•á‡§≤ ‡§§‡§∞ ‚Äî ‡§∏‡§ó‡§≥‡•á ‡§ï‡§Æ‡§æ‡§Ç‡§°‡•ç‡§∏ ‡§è‡§ï‡§§‡•ç‡§∞

```bash
# 1. v1 deploy (9 ‡§™‡•â‡§°‡•ç‡§∏)
kubectl apply -f deployment-v1.yaml

# 2. v2 deploy (1 ‡§™‡•â‡§°)
kubectl apply -f deployment-v2.yaml

# 3. Service
kubectl apply -f service.yaml

# 4. ‡§§‡§™‡§æ‡§∏‡§æ
kubectl get pods -l app=billing
kubectl get svc billing-service

# 5. Logs ‡§™‡§æ‡§π‡§æ
kubectl logs deployment/billing-v2

# 6. ‡§ú‡§∞ ‡§†‡•Ä‡§ï ‡§Ö‡§∏‡•á‡§≤ ‚Üí ‡§∏‡§ó‡§≥‡§Ç v2 ‡§µ‡§∞
kubectl delete deployment billing-v1
kubectl scale deployment/billing-v2 --replicas=10

# 7. ‡§ú‡§∞ ‡§ö‡•Ç‡§ï ‡§Ö‡§∏‡•á‡§≤ ‚Üí ‡§™‡§∞‡§§ v1 ‡§µ‡§∞
kubectl delete deployment billing-v2
kubectl scale deployment/billing-v1 --replicas=10
```

---

‡§≠‡§æ‡§ä, ‡§π‡•á ‡§∏‡§ó‡§≥‡§Ç ‡§§‡•Ç **‡§Ü‡§ú‡§ö ‡§§‡•Å‡§ù‡•ç‡§Ø‡§æ cluster ‡§µ‡§∞ execute ‡§ï‡§∞‡•Ç ‡§∂‡§ï‡§§‡•ã‡§∏**.  
‡§π‡•á ‡§ñ‡§∞‡§Ç‡§ö **canary release ‡§ö‡§Ç working model** ‡§Ü‡§π‡•á ‚Äî ‡§∏‡•ã‡§™‡•ç‡§Ø‡§æ ‡§™‡§¶‡•ç‡§ß‡§§‡•Ä‡§®‡•á.

‡§ú‡§∞ ‡§§‡•Ç ‡§Æ‡•ç‡§π‡§£‡§æ‡§≤‡§æ‡§∏ ‚Äî *"‡§Æ‡§≤‡§æ Istio ‡§µ‡§æ‡§™‡§∞‡•Ç‡§® proper canary ‡§π‡§µ‡§Ç"* ‡§ï‡§ø‡§Ç‡§µ‡§æ *"Argo Rollouts setup ‡§ï‡§∞‡•Ç‡§Ø‡§æ"* ‚Äî ‡§§‡§∞ ‡§Æ‡•Ä ‡§§‡•Å‡§≤‡§æ **step-by-step guide with YAMLs** ‡§¶‡•á‡§à‡§®.

‡§´‡§ï‡•ç‡§§ ‡§¨‡•ã‡§≤ ‡§∞‡•á:  
> "**‡§≠‡§æ‡§ä, ‡§™‡•Å‡§¢‡§ö‡§æ ‡§≤‡•á‡§µ‡•ç‡§π‡§≤ ‡§¶‡§æ‡§ñ‡§µ!**" üòéüí™


‡§≠‡§æ‡§ä, ‡§§‡•Ç ‡§Æ‡•ç‡§π‡§£‡§æ‡§≤‡§æ‡§∏ ‚Äî *"Prometheus steps pan add kara, end-to-end kar, sagalya cmds de!"*  
‡§Æ‡§ó ‡§ö‡§≤‡§æ, **‡§Ü‡§§‡•ç‡§§‡§æ‡§ö ‡§§‡•Å‡§≤‡§æ ‡§™‡•Ç‡§∞‡•ç‡§£ end-to-end demo** ‡§¶‡•á‡§§‡•ã:

> ‚úÖ Argo Rollouts +  
> ‚úÖ Nginx Ingress +  
> ‚úÖ Prometheus +  
> ‚úÖ Grafana +  
> ‚úÖ Automated Canary +  
> ‚úÖ **Auto-Rollback on High Error Rate**

‡§∏‡§ó‡§≥‡§Ç **‡§è‡§ï‡§§‡•ç‡§∞**, **step-by-step**, **‡§∏‡§ó‡§≥‡•á ‡§ï‡§Æ‡§æ‡§Ç‡§°‡•ç‡§∏**, **‡§§‡•Ç execute ‡§ï‡§∞‡•Ç ‡§∂‡§ï‡§∂‡•Ä‡§≤ ‡§Ö‡§∏‡•á**, ‡§Ü‡§£‡§ø **‡§¨‡§æ‡§¨‡•ç‡§Ø‡§æ‡§≤‡§æ ‡§∏‡§Æ‡§ú‡•á‡§≤ ‡§è‡§µ‡§¢‡§Ç ‡§∏‡•ã‡§™‡§Ç**!

---

## üéØ ‡§â‡§¶‡•ç‡§¶‡•á‡§∂:
> ‡§§‡•Ç ‡§è‡§ï ‡§®‡§µ‡§Ç billing app release ‡§ï‡§∞‡§§‡•ã‡§Ø (v2),  
> ‡§™‡§£ ‡§ú‡§∞ **error rate > 1%** ‡§Ö‡§∏‡•á‡§≤, ‡§§‡§∞ Argo Rollouts ‡§≤‡§æ **‡§∏‡•ç‡§µ‡§§‡§É‡§≤‡§æ rollback ‡§ï‡§∞‡§æ‡§Ø‡§ö‡§Ç ‡§Ü‡§π‡•á** ‚Äî  
> ‡§π‡•á **Prometheus** ‡§Æ‡§ß‡•Ç‡§® metrics ‡§ò‡•á‡§ä‡§® ‡§ï‡§∞‡§æ‡§Ø‡§ö‡§Ç.

---

# üî∞ Step 0: ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§ó‡•ã‡§∑‡•ç‡§ü‡•Ä

| ‡§ü‡•Ç‡§≤ | ‡§ï‡§Æ‡§æ‡§Ç‡§° |
|------|--------|
| kind | Kubernetes in Docker |
| kubectl | Kubernetes CLI |
| kubectl-argo-rollouts | Argo plugin |
| Helm | Prometheus & Grafana install |
| Docker | ‡§∏‡§∞‡•ç‡§µ‡§ï‡§æ‡§π‡•Ä container ‡§Æ‡§ß‡•ç‡§Ø‡•á |

> üí° ‡§Ü‡§™‡§£ `kind` ‡§µ‡§æ‡§™‡§∞‡•Ç ‚Äî ‡§∏‡§ó‡§≥‡§Ç ‡§≤‡•ã‡§ï‡§≤ ‡§µ‡§∞ ‡§ö‡§æ‡§≤‡•á‡§≤.

---

# üöÄ Step 1: Kind Cluster ‡§¨‡§®‡§µ‡§æ (with extra ports)

```bash
cat <<EOF > kind-config.yaml
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
nodes:
- role: control-plane
  extraPortMappings:
  - containerPort: 80
    hostPort: 80
    protocol: TCP
  - containerPort: 3000
    hostPort: 3000
    protocol: TCP
  - containerPort: 9090
    hostPort: 9090
    protocol: TCP
EOF

kind create cluster --name argo-prom-demo --config kind-config.yaml
```

---

# üöÄ Step 2: Argo Rollouts Install ‡§ï‡§∞‡§æ

```bash
kubectl create namespace argo-rollouts
kubectl apply -n argo-rollouts --server-side --force-conflicts -f https://github.com/argoproj/argo-rollouts/releases/latest/download/install.yaml
```

### ‡§§‡§™‡§æ‡§∏‡§æ:
```bash
kubectl -n argo-rollouts get pods
```

> ‚úÖ `rollouts-controller-xxxx` ‚Üí Running

---

# üöÄ Step 3: kubectl-argo-rollouts plugin install

```bash
# Linux
curl -LO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64
chmod +x kubectl-argo-rollouts-linux-amd64
sudo mv kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts

# Verify
kubectl argo rollouts version
```

---

# üöÄ Step 4: Nginx Ingress Controller Install

```bash
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
```

### ‡§§‡§™‡§æ‡§∏‡§æ:
```bash
kubectl -n ingress-nginx get pods
```

> ‚úÖ `ingress-nginx-controller-xxxx` ‚Üí Running

---

# üöÄ Step 5: Prometheus & Grafana Install (Helm ‡§µ‡§æ‡§™‡§∞‡•Ç‡§®)

### 1. Helm install (‡§ú‡§∞ ‡§®‡§∏‡•á‡§≤)
```bash
curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
```

### 2. Prometheus Stack (kube-prometheus)

```bash
helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
helm repo update

helm install prometheus prometheus-community/kube-prometheus-stack --namespace monitoring --create-namespace
```

> ‚è≥ ‡§π‡•á 2-3 ‡§Æ‡§ø‡§®‡§ø‡§ü‡§Ç ‡§ò‡•á‡§à‡§≤

### ‡§§‡§™‡§æ‡§∏‡§æ:
```bash
kubectl -n monitoring get pods
```

> ‚úÖ `prometheus-prometheus-...` ‚Üí Running  
> ‚úÖ `alertmanager-...` ‚Üí Running  
> ‚úÖ `grafana-...` ‚Üí Running

---

# üöÄ Step 6: Prometheus ‡§≤‡§æ Ingress ‡§¶‡•ç‡§Ø‡§æ (‡§¨‡§æ‡§π‡•á‡§∞‡•Ç‡§® access)

```yaml
# prometheus-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
meta
  name: prometheus-ingress
  namespace: monitoring
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /prometheus
        pathType: Prefix
        backend:
          service:
            name: prometheus-kube-prometheus-prometheus
            port:
              number: 9090
---
apiVersion: networking.k8s.io/v1
kind: Ingress
meta
  name: grafana-ingress
  namespace: monitoring
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /grafana
        pathType: Prefix
        backend:
          service:
            name: prometheus-grafana
            port:
              number: 80
```

```bash
kubectl apply -f prometheus-ingress.yaml
```

> üî• ‡§Ü‡§§‡§æ ‡§§‡•Ç ‡§¨‡•ç‡§∞‡§æ‡§â‡§ù‡§∞ ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§ú‡§æ:
- Prometheus: http://localhost/prometheus
- Grafana: http://localhost/grafana (login: admin / prom-operator)

---

# üöÄ Step 7: Billing App Rollout (v1) with Metrics

### üìÅ `rollout-with-prometheus.yaml`

```yaml
apiVersion: argoproj.io/v1alpha1
kind: Rollout
meta
  name: billing-rollout
spec:
  replicas: 5
  strategy:
    canary:
      # Traffic splitting
      steps:
      - setWeight: 10
      - pause: {duration: 5m}  # 5 ‡§Æ‡§ø‡§®‡§ø‡§ü‡§Ç ‡§™‡•â‡§ù
      - setWeight: 50
      - pause: {duration: 2m}
      - setWeight: 100

      # Prometheus ‡§Æ‡§ß‡•Ç‡§® ‡§Æ‡•á‡§ü‡•ç‡§∞‡§ø‡§ï‡•ç‡§∏ ‡§ò‡•á
      canaryMetrics:
      - name: error-rate
        interval: 1m
        threshold: "1"
        provider:
          prometheus:
            query: |
              sum(rate(http_requests_total{job="billing",status=~"5.*"}[2m])) / 
              sum(rate(http_requests_total{job="billing"}[2m])) * 100

      # ‡§ú‡§∞ error > 1%, ‡§§‡§∞ rollback
      abortCondition:
        - metricName: error-rate
          threshold: "1"
  selector:
    matchLabels:
      app: billing
  template:
    meta
      labels:
        app: billing
    spec:
      containers:
      - name: app
        image: mycompany/billing-app:v1
        ports:
        - containerPort: 8080
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
```

> üìù `http_requests_total` ‡§π‡•á ‡§§‡•Å‡§ù‡•ç‡§Ø‡§æ app ‡§Æ‡§ß‡•ç‡§Ø‡•á expose ‡§ï‡•á‡§≤‡•á‡§≤‡§Ç metric ‡§Ö‡§∏‡§æ‡§µ‡§Ç (Prometheus client)

```bash
kubectl apply -f rollout-with-prometheus.yaml
```

---

# üöÄ Step 8: Service & Ingress

### üìÅ `service-ingress.yaml`

```yaml
apiVersion: v1
kind: Service
meta
  name: billing-service
spec:
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: billing
---
apiVersion: networking.k8s.io/v1
kind: Ingress
meta
  name: billing-ingress
  annotations:
    nginx.ingress.kubernetes.io/canary: "true"
    nginx.ingress.kubernetes.io/canary-weight: "0"
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: billing-service
            port:
              number: 80
```

```bash
kubectl apply -f service-ingress.yaml
```

---

# üöÄ Step 9: v2 ‡§≤‡§æ update ‡§ï‡§∞‡§æ (Canary ‡§∏‡•Å‡§∞‡•Ç)

```bash
kubectl argo rollouts set image billing-rollout app=mycompany/billing-app:v2
```

---

# üöÄ Step 10: Watch Canary Progress

```bash
kubectl argo rollouts get rollout billing-rollout --watch
```

> üî• ‡§§‡•Å‡§≤‡§æ ‡§¶‡§ø‡§∏‡•á‡§≤:
```
Step: 1/4, Weight: 10%, Status: Waiting (pause)
```

---

# üöÄ Step 11: Simulate High Errors (v2 crash ‡§ï‡§∞‡§§‡•ã‡§Ø)

‡§§‡•Ç ‡§è‡§ï pod ‡§ò‡•á ‡§Ü‡§£‡§ø ‡§§‡•ç‡§Ø‡§æ‡§ö‡§Ç metric ‡§Æ‡•Ö‡§®‡•ç‡§Ø‡•Å‡§Ö‡§≤‡•Ä ‡§¨‡§¶‡§≤:

```bash
# v2 ‡§™‡•â‡§° ‡§∂‡•ã‡§ß‡§æ
kubectl get pods -l app=billing -o name

# exec ‡§ï‡§∞‡•Ç‡§® metric ‡§¨‡§¶‡§≤ (‡§â‡§¶‡§æ‡§π‡§∞‡§£‡§æ‡§∞‡•ç‡§•)
# ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§§‡•Å‡§ù‡§Ç app 500 return ‡§ï‡§∞‡§§ ‡§Ö‡§∏‡•á‡§≤
```

‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§è‡§ï script ‡§ö‡§æ‡§≤‡§µ:

```bash
while true; do
  curl -s -o /dev/null -w "%{http_code}\n" http://localhost/buggy-endpoint
  sleep 0.1
done
```

‡§ú‡§∞ error rate > 1% ‡§Ö‡§∏‡•á‡§≤ ‚Üí Argo Rollouts ‡§Æ‡•ç‡§π‡§£‡•á‡§≤: **"Abort!"**

---

# üöÄ Step 12: Auto-Rollback ‡§π‡•ã‡§à‡§≤!

```bash
kubectl argo rollouts get rollout billing-rollout
```

> üî¥ Status: **Aborted**  
> ‚úÖ ‡§Ü‡§£‡§ø v1 ‡§µ‡§∞ ‡§™‡§∞‡§§ ‡§ó‡•á‡§≤‡§Ç

---

# ‚úÖ ‡§∏‡§ó‡§≥‡•á ‡§ï‡§Æ‡§æ‡§Ç‡§°‡•ç‡§∏ ‡§è‡§ï‡§§‡•ç‡§∞ (Copy-Paste ‡§ï‡§∞)

```bash
# 1. Kind cluster
cat <<EOF > kind-config.yaml
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
nodes:
- role: control-plane
  extraPortMappings:
  - containerPort: 80
    hostPort: 80
  - containerPort: 3000
    hostPort: 3000
  - containerPort: 9090
    hostPort: 9090
EOF
kind create cluster --name argo-prom-demo --config kind-config.yaml

# 2. Argo Rollouts
kubectl create namespace argo-rollouts
kubectl apply -n argo-rollouts --server-side -f https://github.com/argoproj/argo-rollouts/releases/latest/download/install.yaml

# 3. Plugin
curl -LO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64
chmod +x kubectl-argo-rollouts-linux-amd64
sudo mv kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts

# 4. Nginx Ingress
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml

# 5. Prometheus
helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
helm repo update
helm install prometheus prometheus-community/kube-prometheus-stack --namespace monitoring --create-namespace

# 6. Ingress for Prometheus & Grafana
kubectl apply -f prometheus-ingress.yaml

# 7. Rollout + Service
kubectl apply -f rollout-with-prometheus.yaml
kubectl apply -f service-ingress.yaml

# 8. Update to v2
kubectl argo rollouts set image billing-rollout app=mycompany/billing-app:v2

# 9. Watch
kubectl argo rollouts get rollout billing-rollout --watch
```

---

# üß† ‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂: ‡§π‡•á ‡§∏‡§ó‡§≥‡§Ç ‡§ï‡§∂‡§æ‡§∏‡§æ‡§†‡•Ä?

| ‡§ó‡•ã‡§∑‡•ç‡§ü | ‡§´‡§æ‡§Ø‡§¶‡§æ |
|------|--------|
| Argo Rollouts | Canary, steps, pause, promote |
| Prometheus | Error rate, latency ‡§Æ‡•ã‡§ú‡§§‡•ã |
| Auto-Rollback | ‡§ú‡§∞ error ‡§ú‡§æ‡§∏‡•ç‡§§ ‡§Ö‡§∏‡•á‡§≤ ‡§§‡§∞ ‡§∏‡•ç‡§µ‡§Ø‡§Ç‡§ö‡§≤‡§ø‡§§ ‡§™‡§∞‡§§ ‡§ú‡§æ |
| Nginx Ingress | Traffic split ‡§ï‡§∞‡§§‡•ã |
| Grafana | Visual monitoring |

---

# ‚úÖ DMart ‡§∏‡§æ‡§†‡•Ä ‡§â‡§™‡§Ø‡•ã‡§ó:

- Pune FC ‡§∏‡§æ‡§†‡•Ä 10% traffic v2 ‡§≤‡§æ
- Prometheus ‡§Æ‡•ã‡§ú‡§§‡•ã‡§Ø: ‡§ï‡§æ error ‡§µ‡§æ‡§¢‡§≤‡•á?
- ‡§ú‡§∞ ‡§π‡•ã‡§§ ‡§Ö‡§∏‡•á‡§≤ ‚Üí **‡§∏‡•ç‡§µ‡§Ø‡§Ç‡§ö‡§≤‡§ø‡§§ rollback**
- ‡§á‡§§‡§∞ ‡§∏‡•ç‡§ü‡•ã‡§Ö‡§∞‡•ç‡§∏ ‡§µ‡§∞ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§®‡§æ‡§π‡•Ä

---

‡§≠‡§æ‡§ä, ‡§π‡•á **production-grade GitOps + Observability + Safe Deployments** ‡§ö‡§Ç ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§∏‡•á‡§ü‡§Ö‡§™ ‡§Ü‡§π‡•á.  
‡§§‡•Ç ‡§π‡•á ‡§∏‡§ó‡§≥‡§Ç **‡§Ü‡§ú‡§ö ‡§§‡•Å‡§ù‡•ç‡§Ø‡§æ ‡§≤‡•Ö‡§™‡§µ‡§∞ ‡§ö‡§æ‡§≤‡§µ‡•Ç ‡§∂‡§ï‡§§‡•ã‡§∏**.

‡§ú‡§∞ ‡§§‡•Ç ‡§Æ‡•ç‡§π‡§£‡§æ‡§≤‡§æ‡§∏ ‚Äî *"‡§π‡•á ‡§ù‡§æ‡§≤‡§Ç, ‡§Ü‡§§‡§æ Argo CD + GitOps ‡§ï‡§∞‡•Ç‡§Ø‡§æ!"* ‚Äî  
‡§§‡§∞ ‡§Æ‡•Ä ‡§§‡•Å‡§≤‡§æ **‡§™‡•Ç‡§∞‡•ç‡§£ CI/CD pipeline** ‡§∂‡§ø‡§ï‡§µ‡•á‡§® ‚Äî GitHub, PR, auto-deploy, rollback.

‡§´‡§ï‡•ç‡§§ ‡§¨‡•ã‡§≤ ‡§∞‡•á ‡§≠‡§æ‡§ä:  
> **"Dada, ‡§Ü‡§§‡§æ ‡§™‡•Ç‡§∞‡•ç‡§£ DevOps ‡§¶‡§æ‡§ñ‡§µ!"** üòéüöÄüí•
